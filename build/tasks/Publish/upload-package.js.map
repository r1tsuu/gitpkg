{"version":3,"file":"upload-package.js","names":["uploadPackage","config","pkg","registry","process","env","GIT_AUTHOR_DATE","GIT_COMMITTER_DATE","pkgTempDir","getTempDir","pkgTempDirPkg","path","join","gitpkgPackageName","getGitTagName","execLikeShell","err","gitErrorExists","exists","stderr","indexOf","Error"],"sources":["../../../src/tasks/Publish/upload-package.js"],"sourcesContent":["import path from 'path';\nimport execLikeShell from './exec-like-shell';\nimport getTempDir from './get-temp-dir';\nimport getGitTagName from './get-git-tag-name';\n\nexport default async function uploadPackage(config, pkg, registry) {\n  // Timestamps are one of the inputs that cause entropy in a commit SHA.  By\n  // freezing the timestamps, we ensure that running `gitpkg publish` twice on\n  // the same files results in the same SHA.\n  //\n  // This makes publishing idempotent: you can run `gitpkg publish` as many\n  // times as you like, and it won't error unless the underlying files don't\n  // match.\n  process.env.GIT_AUTHOR_DATE = `1970-01-01T00:00:00.000Z`;\n  process.env.GIT_COMMITTER_DATE = `1970-01-01T00:00:00.000Z`;\n\n  const pkgTempDir = await getTempDir(pkg);\n  const pkgTempDirPkg = path.join(pkgTempDir, 'package');\n  const gitpkgPackageName = getGitTagName(pkg, config);\n  await execLikeShell('git init', pkgTempDirPkg);\n  await execLikeShell('git add .', pkgTempDirPkg);\n  await execLikeShell('git commit --no-verify -m gitpkg', pkgTempDirPkg);\n  await execLikeShell(`git remote add origin ${registry}`, pkgTempDirPkg);\n  await execLikeShell(`git tag ${gitpkgPackageName}`, pkgTempDirPkg);\n\n  // This command looks up the existing tags on the remote.\n  //\n  // If you push a tag that already exists, it should succeed with\n  // \"Everything up-to-date\".  However, your local copy must know the remote\n  // has the matching tag.  Otherwise, you'll receive `gitErrorExists`.\n  //\n  // By fetching and then pushing, we ensure that:\n  // -  If the tag hasn't been pushed yet, it is uploaded and the command\n  //    succeeds.\n  // -  If an identical tag has already been pushed, the command succeeds with\n  //    \"Everything up-to-date\".\n  // -  If the same tag name has already been pushed with different contents\n  //    (e.g. you forgot to change the version after making changes), the\n  //    push is rejected and an error is thrown.\n  await execLikeShell(`git fetch origin 'refs/tags/*:*'`, pkgTempDirPkg);\n\n  try {\n    await execLikeShell(`git push origin ${gitpkgPackageName}`, pkgTempDirPkg);\n  } catch (err) {\n    const gitErrorExists = 'Updates were rejected because the tag already exists in the remote.';\n    const exists = err.stderr.indexOf(gitErrorExists) > -1;\n    if (exists) {\n      throw new Error(`The git tag \"${gitpkgPackageName}\" already exists in \"${registry}\".`);\n    }\n\n    throw err;\n  }\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEe,eAAeA,aAAf,CAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,QAA1C,EAAoD;EACjE;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,OAAO,CAACC,GAAR,CAAYC,eAAZ,GAA+B,0BAA/B;EACAF,OAAO,CAACC,GAAR,CAAYE,kBAAZ,GAAkC,0BAAlC;EAEA,MAAMC,UAAU,GAAG,MAAM,IAAAC,mBAAA,EAAWP,GAAX,CAAzB;;EACA,MAAMQ,aAAa,GAAGC,aAAA,CAAKC,IAAL,CAAUJ,UAAV,EAAsB,SAAtB,CAAtB;;EACA,MAAMK,iBAAiB,GAAG,IAAAC,sBAAA,EAAcZ,GAAd,EAAmBD,MAAnB,CAA1B;EACA,MAAM,IAAAc,sBAAA,EAAc,UAAd,EAA0BL,aAA1B,CAAN;EACA,MAAM,IAAAK,sBAAA,EAAc,WAAd,EAA2BL,aAA3B,CAAN;EACA,MAAM,IAAAK,sBAAA,EAAc,kCAAd,EAAkDL,aAAlD,CAAN;EACA,MAAM,IAAAK,sBAAA,EAAe,yBAAwBZ,QAAS,EAAhD,EAAmDO,aAAnD,CAAN;EACA,MAAM,IAAAK,sBAAA,EAAe,WAAUF,iBAAkB,EAA3C,EAA8CH,aAA9C,CAAN,CAlBiE,CAoBjE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,MAAM,IAAAK,sBAAA,EAAe,kCAAf,EAAkDL,aAAlD,CAAN;;EAEA,IAAI;IACF,MAAM,IAAAK,sBAAA,EAAe,mBAAkBF,iBAAkB,EAAnD,EAAsDH,aAAtD,CAAN;EACD,CAFD,CAEE,OAAOM,GAAP,EAAY;IACZ,MAAMC,cAAc,GAAG,qEAAvB;IACA,MAAMC,MAAM,GAAGF,GAAG,CAACG,MAAJ,CAAWC,OAAX,CAAmBH,cAAnB,IAAqC,CAAC,CAArD;;IACA,IAAIC,MAAJ,EAAY;MACV,MAAM,IAAIG,KAAJ,CAAW,gBAAeR,iBAAkB,wBAAuBV,QAAS,IAA5E,CAAN;IACD;;IAED,MAAMa,GAAN;EACD;AACF"}